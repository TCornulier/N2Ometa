####### Generate data sets with and without NAs (dummy imputed values for use with jagam to generate the right model matrix size)

M8.vars<- c("logN2O.cum.pos", "pH.cent", "Grasslands", "logNrate.cent.v2", "Bulk.density.imputed", "Fert01", "NO3.avail.v3", "studyID.f", "logDegDays.exp.compact", "logSumPrecip.exp.compact") #, "PosDDays.air.exp", "FrostDDays.soil.exp", "PosDDays.soil.exp", "logNrate.cent.N.appl1", "logNrate.cent.N.appl2.3", "logNrate.cent.N.appl4.", "N.appl.num", "Nuptake.group.num", "logFTCy.exp"
sub.M8<- apply(dat[, c("logN2O.cum.pos", "logNrate.cent.v2", "Fert01", "NO3.avail.v3", "studyID.f", "logWetDays.exp", "Bulk.density.imputed")], 1, FUN= function(x) !any(is.na(x))) # leave only variables for which NAs cannot be imputed, so that obs with missing data are removed
table(sub.M8) 	# FALSE  TRUE 
  				#   674  2012 
dat.M8<- dat[sub.M8, M8.vars]
dat.M8.dummy<- dat.M8 # for use with jagam to generate the right model matrix size

# replace NAs by any value (here median of column)
for(i in 1:ncol(dat.M8)){
	if(is.numeric(dat.M8.dummy[, i])){ dat.M8.dummy[is.na(dat.M8.dummy[, i]), i]<- median(dat.M8.dummy[, i], na.rm= T) }
	if(is.character(dat.M8.dummy[, i])){ dat.M8.dummy[is.na(dat.M8.dummy[, i]), i]<- median(dat.M8.dummy[, i], na.rm= T) }
	if(is.factor(dat.M8.dummy[, i])){ dat.M8.dummy[is.na(dat.M8.dummy[, i]), i]<- median(as.character(dat.M8.dummy[, i]), na.rm= T) }
	if(is.logical(dat.M8.dummy[, i])){ dat.M8.dummy[is.na(dat.M8.dummy[, i]), i]<- F }
}

#################### run JAGAM - Model M8 #####################
pregam.M8<- jagam(formula= logN2O.cum.pos ~ Fert01 
	+ Grasslands 
 	+ Grasslands:Fert01 
	+ s(pH.cent, bs= "cr", k= 9)
	+ te(Bulk.density.imputed, logSumPrecip.exp.compact, k= c(5, 5))
	+ s(logDegDays.exp.compact, k= 8) 
 	+ s(logNrate.cent.v2, by= Fert01)
	+ s(NO3.avail.v3, by= Fert01, k= 5)
 	+ s(studyID.f, bs= "re"),
 	family= gaussian, data= dat.M8.dummy, file= "./JAGS/modelM8.txt", centred=TRUE, sp.prior = "gamma", diagonalize= FALSE)

#################### correct JAGS data #####################
# identify number of fixed effects
nfixed.M8<- rle(colnames(pregam.M8$jags.data$X)=="")$lengths[1] # run length encoding -> take first run of non-empty names (last is random effects)
fixed.names.M8<- pregam.M8$pregam$term.names[1:nfixed.M8]

# replace dummy values in model matrix by NA where they should be (according to dat.M8)
for(i in M8.vars){
 	pregam.M8$jags.data$X[is.na(dat.M8[, i]), grep(i, pregam.M8$pregam$term.names)]<- NA
}

# vars2impute<- apply(pregam.M8$jags.data$X[, 1:nfixed], 2, FUN= function(x) any(is.na(x)))
vars2impute<- apply(pregam.M8$jags.data$X, 2, FUN= function(x) any(is.na(x)))
vars2impute.colIndex<- which(vars2impute)
vars2impute.NMissing<- as.list(apply(pregam.M8$jags.data$X[, vars2impute.colIndex], 2, FUN= function(x) sum(is.na(x))))
vars2impute.whichMissing<- list(apply(pregam.M8$jags.data$X[, vars2impute.colIndex], 2, FUN= function(x) as.numeric(which(is.na(x)))))[[1]]
names(vars2impute.whichMissing)<- paste(gsub(":", ".", gsub("(", ".", gsub(")", "", pregam.M8$pregam$term.names[vars2impute.colIndex], fixed= T), fixed= T)), "whichMissing", sep= ".")
names(vars2impute.NMissing)<- paste(gsub(":", ".", gsub("(", ".", gsub(")", "", pregam.M8$pregam$term.names[vars2impute.colIndex], fixed= T), fixed= T)), "NMissing", sep= ".")

# create lookup table for pH.cent spline bases coords imputation
pH.cent.cat<- cut(dat.M8$pH.cent, breaks= c(-4, -2, -1.5, -1, -0.5, 0, 0.5, 1, 2)) # create 8 classes of pH.cent
pH.cent.cat.prop<- round(table(pH.cent.cat)/sum(table(pH.cent.cat)), 2) # proportion of data per class
pH.cent.ref.index<- unlist(lapply(as.list(round(tapply(dat.M8$pH.cent, pH.cent.cat, mean, na.rm= T), 1)), FUN= function(x) which.min(abs(dat.M8$pH.cent - x)))) # index of pH.cent value closest to class mean
pH.cent.lookup<- pregam.M8$jags.data$X[pH.cent.ref.index, grep("pH.cent", pregam.M8$pregam$term.names)]


pregam.M8$jags.data<- c(pregam.M8$jags.data, vars2impute.NMissing, vars2impute.whichMissing, Grasslands.prop= list(as.vector(table(dat$Grasslands)/sum(!is.na(dat$Grasslands)))), list(pH.cent.cat.prop= as.vector(pH.cent.cat.prop)), list(pH.cent.lookup= as.matrix(pH.cent.lookup)))#,
str(pregam.M8$jags.data)

#################### correct JAGS model #####################
data.frame(colIndex= vars2impute.colIndex, NMissing= unlist(vars2impute.NMissing))
#                                colIndex NMissing
# logCarbon.NMissing                    3      524
# GrasslandsTRUE.NMissing               4       60
# Fert01.GrasslandsTRUE.NMissing        5       60
# s.pH.cent.1.NMissing                  7      256
# s.pH.cent.2.NMissing                  8      256
# s.pH.cent.3.NMissing                  9      256
# s.pH.cent.4.NMissing                 10      256
# s.pH.cent.5.NMissing                 11      256
# s.pH.cent.6.NMissing                 12      256
# s.pH.cent.7.NMissing                 13      256
# s.pH.cent.8.NMissing                 14      256

#### NOT RUN ####
  	# Missing data imputation with informative priors
# 	for(i in 1:logCarbon.NMissing){ 
# 		logC.tmp[i] ~ dnorm(0.485,1.572) # logCarbon prior
# 		X[logCarbon.whichMissing[i], 3] <- logC.tmp[i]
# 	}
	for(i in 1:GrasslandsTRUE.NMissing){ 
		Grasslands.tmp[i] ~ dcat(Grasslands.prop) # Grasslands.TRUE prior
		X[GrasslandsTRUE.whichMissing[i], 3] <- Grasslands.tmp[i] - 1
		X[GrasslandsTRUE.whichMissing[i], 4] <- X[GrasslandsTRUE.whichMissing[i], 3] * X[GrasslandsTRUE.whichMissing[i], 2] # Fert01:Grasslands.TRUE prior
	}
	for(i in 1:s.pH.cent.1.NMissing){ 
		pH.index[i] ~ dcat(pH.cent.cat.prop[]) # pH.cent prior
		X[s.pH.cent.1.whichMissing[i], 5:12]  <- pH.cent.lookup[pH.index[i], ]
	}
	
#### END NOT RUN ####

params <- c("b","rho","scale", "mu", "pH.index", "Grasslands.tmp")# , "logC.tmp"
chains <- 1
iter <- 2000
nb<- 1000

Sys.time() # 
jagsM8.1 <- jags(model.file = "./JAGS/modelM8_NAimputation.txt", data = pregam.M8$jags.data,
              parameters.to.save = params, inits = list(pregam.M8$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 1)
Sys.time() # about 45 h for compiling + 2000 iter
jagsM8.2 <- jags(model.file = "./JAGS/modelM8_NAimputation.txt", data = pregam.M8$jags.data,
              parameters.to.save = params, inits = list(pregam.M8$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 1, jags.seed= 83)
Sys.time() # about 45 h for compiling + 2000 iter
jagsM8.3 <- jags(model.file = "./JAGS/modelM8_NAimputation.txt", data = pregam.M8$jags.data,
              parameters.to.save = params, inits = list(pregam.M8$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 1, jags.seed= 57)
Sys.time() # about 45 h for compiling + 2000 iter
jagsM8.4 <- jags(model.file = "./JAGS/modelM8_NAimputation.txt", data = pregam.M8$jags.data,
              parameters.to.save = params, inits = list(pregam.M8$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 1, jags.seed= 389)
Sys.time() # about 45 h for compiling + 2000 iter
jagsM8.5 <- jags(model.file = "./JAGS/modelM8_NAimputation.txt", data = pregam.M8$jags.data,
              parameters.to.save = params, inits = list(pregam.M8$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 1, jags.seed= 124)
Sys.time() # about 45 h for compiling + 2000 iter
jagsM8.6 <- jags(model.file = "./JAGS/modelM8_NAimputation.txt", data = pregam.M8$jags.data,
              parameters.to.save = params, inits = list(pregam.M8$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 1, jags.seed= 720)
Sys.time() # about 45 h for compiling + 2000 iter

# save(jagsM8.1, file= "jagsM8_1.RData")

load("jagsM8_1.RData"); load("jagsM8_2.RData"); load("jagsM8_3.RData"); load("jagsM8_4.RData"); load("jagsM8_5.RData"); load("jagsM8_6.RData")

jagsM8.6c<- jagsM8.1
jagsM8.6c$BUGSoutput$sims.list<- mapply(rbind, jagsM8.1$BUGSoutput$sims.list, jagsM8.2$BUGSoutput$sims.list, jagsM8.3$BUGSoutput$sims.list, jagsM8.4$BUGSoutput$sims.list, jagsM8.5$BUGSoutput$sims.list, jagsM8.6$BUGSoutput$sims.list)
jagsM8.6c$BUGSoutput$sims.array<- abind(	jagsM8.1$BUGSoutput$sims.array, 
											jagsM8.2$BUGSoutput$sims.array,
											jagsM8.3$BUGSoutput$sims.array,
											jagsM8.4$BUGSoutput$sims.array,
											jagsM8.5$BUGSoutput$sims.array,
											jagsM8.6$BUGSoutput$sims.array, along= 1)

jagsM8.6c$n.iter<- 12000
jagsM8.6c$BUGSoutput$n.iter<- 12000
jagsM8.6c$BUGSoutput$n.burnin<- 6000
jagsM8.6c$BUGSoutput$n.keep<- 6000
jagsM8.6c$BUGSoutput$n.sims<- 6000


samM8<- jags2sam(jagsM8.6c)
jamM8<- sim2jam(samM8,pregam.M8$pregam)

pdf("GAM.M8outputBayes_splines.pdf")
plot(jamM8, pages= 0, scale= 0, scheme= 2)
dev.off()

fx.index.M8<- which(dimnames(jagsM8.6c$BUGSoutput$sims.array)[[3]] %in% paste("b[", 1:nfixed.M8, "]", sep= ""))
dimnames(jagsM8.6c$BUGSoutput$sims.array)[[3]][fx.index.M8]<- fixed.names.M8

jagsM8.mcmc <- as.mcmc(jagsM8.6c)

summ.M8<- summary(jagsM8.mcmc[[1]][, fixed.names.M8], quantiles = c(0.025, 0.5, 0.975))
summ.M8
test.M8<- matrix(0 < summ.M8$quantiles[, "2.5%"] | 0 > summ.M8$quantiles[, "97.5%"])
data.frame(fixed.names.M8, test.M8)

pdf("GAM.M8outputBayes_traces_fixed.pdf", width= 7, height= 21)
xyplot(jagsM8.mcmc[[1]][, fixed.names.M8])
dev.off()
pdf("GAM.M8outputBayes_densityplots_fixed.pdf", width= 7, height= 15)
densityplot(jagsM8.mcmc[[1]][, fixed.names.M8])
dev.off()

N.mu<- pregam.M8$jags.data$n # number of predicted values (number of observations)
M8.predicted<- apply(jagsM8.mcmc[[1]][, paste("mu[", 1:N.mu, "]", sep= "")], 2, mean) # extract posterior mean of predicted values (on log scale)
M8.residual<- pregam.M8$jags.data$y - M8.predicted # compute residuals' posterior mean
M8.observed<- pregam.M8$jags.data$y

par(mfrow= c(2, 2))
# fitted ~ observed
plot(M8.observed, M8.predicted, col= rgb(0, 0, 0, alpha= 0.35)) # overfitting
abline(0, 1, col= 2)
cor(M8.observed, M8.predicted) # 0.9528323
# residual ~ fitted
plot(M8.residual ~ M8.predicted, col= rgb(0, 0, 0, alpha= 0.35)) # underestimation of low values and high values
abline(h= 0, col= 2)
# residual ~ observed
plot(M8.residual ~ M8.observed, col= rgb(0, 0, 0, alpha= 0.35)) # overestimation of low values
abline(h= 0, col= 2)
# distribution of random effects
M8.re<- apply(jagsM8.mcmc[[1]][, paste("b[", grep("studyID.f", colnames(pregam.M8$jags.data$X)), "]", sep= "")], 2, mean)
hist(M8.re, nclass= 25)

