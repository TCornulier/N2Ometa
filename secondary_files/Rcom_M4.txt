####### Generate data sets with and without NAs (dummy imputed values for use with jagam to generate the right model matrix size)

M4.vars<- c("logN2O.cum.pos", "logNdays.cent", "pH.cent", "pH.cent.2", "maincrop3", "logNrate.cent", "Bulk.density.imputed", "Fert01", "NO3.avail.v3", "studyID.f", "logSumPrecip.exp", "logDegDays.exp", "fGrasslands") #, "PosDDays.air.exp", "FrostDDays.soil.exp", "PosDDays.soil.exp", "logNrate.cent.N.appl1", "logNrate.cent.N.appl2.3", "logNrate.cent.N.appl4.", "N.appl.num", "Nuptake.group.num", "logFTCy.exp", "logCarbon"
sub.M4<- apply(dat[, c("logN2O.cum.pos", "logNdays.cent", "maincrop3", "logNrate.cent", "Bulk.density.imputed", "Fert01", "NO3.avail.v3", "studyID.f", "logWetDays.exp")], 1, FUN= function(x) !any(is.na(x))) # leave only variables for which NAs cannot be imputed, so that obs with missing data are removed
table(sub.M4) 	# FALSE  TRUE 
  				#   699  1990 
dat.M4<- dat[sub.M4, M4.vars]
dat.M4.dummy<- dat.M4 # for use with jagam to generate the right model matrix size

# replace NAs by any value (here median of column)
for(i in 1:ncol(dat.M4)){
	if(is.numeric(dat.M4.dummy[, i])){ dat.M4.dummy[is.na(dat.M4.dummy[, i]), i]<- median(dat.M4.dummy[, i], na.rm= T) }
	if(is.character(dat.M4.dummy[, i])){ dat.M4.dummy[is.na(dat.M4.dummy[, i]), i]<- median(dat.M4.dummy[, i], na.rm= T) }
	if(is.factor(dat.M4.dummy[, i])){ dat.M4.dummy[is.na(dat.M4.dummy[, i]), i]<- median(as.character(dat.M4.dummy[, i]), na.rm= T) }
	if(is.logical(dat.M4.dummy[, i])){ dat.M4.dummy[is.na(dat.M4.dummy[, i]), i]<- F }
}

#################### run JAGAM - Model M4 #####################
pregam.M4<- jagam(formula= logN2O.cum.pos ~ Fert01 #+ logNrate.cent
	+ Bulk.density.imputed + maincrop3 #+ Per2An + logFTCy.exp + Pre.Leg + logCarbon 
	+ pH.cent + pH.cent.2 #+ pH.cent.3 + pH.cent.4 + pH.cent.5 + pH.cent.6
 	+ Bulk.density.imputed:Fert01 + maincrop3:Fert01 #+ Per2An:Fert01 + Pre.Leg:Fert01 
 	#+ logCarbon:Fert01 + logFTCy.exp:Fert01 
 	#+ logCarbon:NO3.avail:Fert01
 	#+ s(logNdays.cent, by= fGrasslands, k= 8) # keep only grasslands distinct
	+ ti(logSumPrecip.exp, k= 8) + ti(logDegDays.exp, k= 8) #+ ti(logSumPrecip.exp, logDegDays.exp, k= c(5, 5)) 
	+ logDegDays.exp:Fert01 #+ logSumPrecip.exp:Fert01 
 	+ s(logNrate.cent)#, Nuptake.group.num, k= c(8, 3))
	+ ti(NO3.avail.v3, by= Fert01, k= 5)
	#+ NO3.avail.v3:logSumPrecip.exp:Fert01
  	#+ ti(NO3.avail, N.appl.num, by= Fert01, k= c(6, 3)) 
  	#+ s(NO3.avail, by= logNrate.cent.N.appl1, k= c(5)) 
  	#+ s(NO3.avail, by= logNrate.cent.N.appl2.3, k= c(5)) 
  	#+ s(NO3.avail, by= logNrate.cent.N.appl4., k= c(5))
	#+ te(logWetDays.exp, Bulk.density.imputed, k= c(6, 8))
 	+ s(studyID.f, bs= "re"),
 	family= gaussian, data= dat.M4.dummy, file= "./JAGS/modelM4.txt", centred=TRUE, sp.prior = "gamma", diagonalize= FALSE)

#################### correct JAGS data #####################
# dim(pregam.M4$jags.data$X)
# [1] 1898  555

# identify number of fixed effects
nfixed.M4<- rle(colnames(pregam.M4$jags.data$X)=="")$lengths[1] # run length encoding -> take first run of non-empty names (last is random effects)
fixed.names.M4<- pregam.M4$pregam$term.names[1:nfixed.M4]

# replace dummy values in model matrix by NA where they should be (according to dat.M4)
for(i in M4.vars){
	pregam.M4$jags.data$X[is.na(dat.M4[, i]), grep(i, colnames(pregam.M4$jags.data$X)[1:nfixed.M4])]<- NA
}

vars2impute<- apply(pregam.M4$jags.data$X[, 1:nfixed.M4], 2, FUN= function(x) any(is.na(x)))
vars2impute.colIndex<- which(vars2impute)
vars2impute.NMissing<- as.list(apply(pregam.M4$jags.data$X[, vars2impute.colIndex], 2, FUN= function(x) sum(is.na(x))))
vars2impute.whichMissing<- data.frame(apply(pregam.M4$jags.data$X[, vars2impute.colIndex], 2, FUN= function(x) as.numeric(which(is.na(x)))))
names(vars2impute.whichMissing)<- paste(sub(":", ".", colnames(vars2impute.whichMissing)), "whichMissing", sep= ".")
names(vars2impute.NMissing)<- paste(sub(":", ".", names(vars2impute.NMissing)), "NMissing", sep= ".")

pregam.M4$jags.data<- c(pregam.M4$jags.data, vars2impute.NMissing, vars2impute.whichMissing)#,
# 	Pre.Leg.prop= list(as.vector(table(dat$Pre.Leg)/sum(!is.na(dat$Pre.Leg)))),
# 	Per2An.prop= list(as.vector(table(dat$Per2An)/sum(!is.na(dat$Per2An)))))
str(pregam.M4$jags.data)

#################### correct JAGS model #####################
cbind(colIndex= vars2impute.colIndex, NMissing= vars2impute.NMissing)
#           colIndex NMissing
# pH.cent   6        241     
# pH.cent.2 7        241

#### NOT RUN ####
  	# Missing data imputation with informative priors
	for(i in 1:pH.cent.NMissing){ 
		pH.tmp[i] ~ dbeta(1.3, 1.3) # pH.cent prior
		X[pH.cent.whichMissing[i], 6] <- pH.tmp[i] * 4.5 - 2.5
		X[pH.cent.whichMissing[i], 7] <- (pH.tmp[i] * 4.5 - 2.5)^2 # was a bug here, not corrected in stored output up to 12/02/2018 included
	}
#### END NOT RUN ####

params <- c("b","rho","scale", "mu")
chains <- 1
iter <- 6000
nb<- 2000

Sys.time() # 

# jagsM4 <- jags(model.file = "./JAGS/modelM4_NAimputation2.txt", data = pregam.M4$jags.data,
#               parameters.to.save = params, inits = list(pregam.M4$jags.ini),
#               n.chains = chains, n.iter = iter, n.burnin= nb,
#               n.thin = 2)
jagsM4.chain2 <- jags(model.file = "./JAGS/modelM4_NAimputation2.txt", data = pregam.M4$jags.data,
              parameters.to.save = params, inits = list(pregam.M4$jags.ini),
              n.chains = chains, n.iter = iter, n.burnin= nb,
              n.thin = 2, jags.seed= 43)
Sys.time() # about 24 h for compiling + 6000 iter, each

save(jagsM4, file= "jagsM4_Output6000iter.RData")
save(jagsM4.chain2, file= "jagsM4_Output6000iter_chain2.RData")
load("jagsM4_Output6000iter.RData")


jagsM4.c1234<- jagsM4
jagsM4.c1234$BUGSoutput$sims.list<- mapply(rbind, jagsM4$BUGSoutput$sims.list, jagsM4.chain2$BUGSoutput$sims.list)
jagsM4.c1234$BUGSoutput$sims.array<- abind(jagsM4$BUGSoutput$sims.array, jagsM4.chain2$BUGSoutput$sims.array, along= 1)
jagsM4.c1234$n.iter<- 12000
jagsM4.c1234$BUGSoutput$n.iter<- 12000
jagsM4.c1234$BUGSoutput$n.burnin<- 4000
jagsM4.c1234$BUGSoutput$n.keep<- 4000
jagsM4.c1234$BUGSoutput$n.sims<- 4000

samM4<- jags2sam(jagsM4.c1234)
jamM4<- sim2jam(samM4,pregam.M4$pregam)

samM4.1<- jags2sam(jagsM4)
jamM4.1<- sim2jam(samM4.1,pregam.M4$pregam)
samM4.2<- jags2sam(jagsM4.chain2)
jamM4.2<- sim2jam(samM4.2,pregam.M4$pregam)

pdf("GAM.M4outputBayes_splines_2.pdf")
plot(jamM4, pages= 0, scale= 0, scheme= 2)
# plot(1)
# plot(jamM4.1, pages= 0, scale= 0, scheme= 2)
# plot(jamM4.2, pages= 0, scale= 0, scheme= 2) # very consistent across chains
dev.off()

dimnames(jagsM4.c1234$BUGSoutput$sims.array)[[3]][1:nfixed.M4]<- fixed.names.M4

jagsM4.mcmc <- as.mcmc(jagsM4.c1234)

summ.M4<- summary(jagsM4.mcmc[[1]][, fixed.names.M4], quantiles = c(0.025, 0.5, 0.975))
summ.M4
test.M4<- matrix(0 < summ.M4$quantiles[, "2.5%"] | 0 > summ.M4$quantiles[, "97.5%"])
data.frame(fixed.names.M4, test.M4)

# plot pH effect
M4.pH.coef<- apply(jagsM4.mcmc[[1]][, c("(Intercept)", "Fert01", "pH.cent", "pH.cent.2")], 2, mean)
M4.pH.coef.vcv<- cov(jagsM4.mcmc[[1]][, c("(Intercept)", "Fert01", "pH.cent", "pH.cent.2")])
range(dat$pH, na.rm= T)
# [1] 3.3 8.7
pH.seq<- seq(3.3, 8.7, l= 50)
pH.pred<- cbind(1, 1, (pH.seq-7), (pH.seq-7)^2) %*% M4.pH.coef
plot(pH.seq, pH.pred, type= "l")
require(MASS)
M4.pH.coef.sim<- t(mvrnorm(n = 1000, mu= M4.pH.coef, Sigma= M4.pH.coef.vcv))
pH.pred.sim<- cbind(1, 1, (pH.seq-7), (pH.seq-7)^2) %*% M4.pH.coef.sim
matplot(pH.seq, pH.pred.sim, type= "l", col= rgb(0.35, 0.35, 0.35, alpha= 0.15), lty= 1)
lines(pH.seq, pH.pred, lwd= 2)

pdf("GAM.M4outputBayes_traces_fixed.pdf", width= 7, height= 21)
xyplot(jagsM4.mcmc[[1]][, fixed.names.M4])
dev.off()
pdf("GAM.M4outputBayes_densityplots_fixed.pdf", width= 7, height= 15)
densityplot(jagsM4.mcmc[[1]][, fixed.names.M4])
dev.off()

N.mu<- pregam.M4$jags.data$n # number of predicted values (number of observations)
M4.predicted<- apply(jagsM4.mcmc[[1]][, paste("mu[", 1:N.mu, "]", sep= "")], 2, mean) # extract posterior mean of predicted values (on log scale)
M4.residual<- M4.predicted - pregam.M4$jags.data$y # compute residual's posterior mean
M4.observed<- pregam.M4$jags.data$y

par(mfrow= c(2, 3))
# fitted ~ observed
plot(M4.observed, M4.predicted, col= rgb(0, 0, 0, alpha= 0.35)) # overfitting
abline(0, 1, col= 2)
cor(M4.observed, M4.predicted) # 0.9528323
# residual ~ fitted
plot(M4.residual ~ M4.predicted, col= rgb(0, 0, 0, alpha= 0.35)) # underestimation of low values and high values
abline(h= 0, col= 2)
# residual ~ observed
plot(M4.residual ~ M4.observed, col= rgb(0, 0, 0, alpha= 0.35)) # overestimation of low values
abline(h= 0, col= 2)
# distribution of random effects
M4.re<- apply(jagsM4.mcmc[[1]][, grep("studyID.f", colnames(pregam.M4$jags.data$X))], 2, mean)
hist(M4.re, nclass= 25)

# distribution of random effects + mean of random effects per studyID.f
M4.residBYstudyID<- tapply(M4.residual, factor(dat.M4.dummy$studyID.f), mean)
hist(M4.re + M4.residBYstudyID, nclass= 25)


